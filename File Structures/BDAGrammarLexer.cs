//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\BDAGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class BDAGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, ID=6, NUM=7, SEP=8, OP=9;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "ID", "NUM", "SEP", "OP"
	};


	public BDAGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BDAGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'SELECT'", "','", "'*'", "'FROM'", "'WHERE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "ID", "NUM", "SEP", "OP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BDAGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BDAGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\v', '\x41', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x6', '\a', '-', '\n', '\a', '\r', '\a', '\xE', 
		'\a', '.', '\x3', '\b', '\x6', '\b', '\x32', '\n', '\b', '\r', '\b', '\xE', 
		'\b', '\x33', '\x3', '\t', '\x6', '\t', '\x37', '\n', '\t', '\r', '\t', 
		'\xE', '\t', '\x38', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '@', '\n', '\n', '\x2', '\x2', '\v', '\x3', 
		'\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', 
		'\xF', '\t', '\x11', '\n', '\x13', '\v', '\x3', '\x2', '\x4', '\x4', '\x2', 
		'\x43', '\\', '\x63', '|', '\x4', '\x2', '\v', '\v', '\"', '\"', '\x2', 
		'\x45', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\x15', '\x3', '\x2', '\x2', '\x2', '\x5', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\a', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'\t', ' ', '\x3', '\x2', '\x2', '\x2', '\v', '%', '\x3', '\x2', '\x2', 
		'\x2', '\r', ',', '\x3', '\x2', '\x2', '\x2', '\xF', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x11', '\x36', '\x3', '\x2', '\x2', '\x2', '\x13', '?', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\a', 'U', '\x2', '\x2', '\x16', 
		'\x17', '\a', 'G', '\x2', '\x2', '\x17', '\x18', '\a', 'N', '\x2', '\x2', 
		'\x18', '\x19', '\a', 'G', '\x2', '\x2', '\x19', '\x1A', '\a', '\x45', 
		'\x2', '\x2', '\x1A', '\x1B', '\a', 'V', '\x2', '\x2', '\x1B', '\x4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '.', '\x2', '\x2', '\x1D', 
		'\x6', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\a', ',', '\x2', '\x2', 
		'\x1F', '\b', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\a', 'H', '\x2', 
		'\x2', '!', '\"', '\a', 'T', '\x2', '\x2', '\"', '#', '\a', 'Q', '\x2', 
		'\x2', '#', '$', '\a', 'O', '\x2', '\x2', '$', '\n', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\a', 'Y', '\x2', '\x2', '&', '\'', '\a', 'J', '\x2', 
		'\x2', '\'', '(', '\a', 'G', '\x2', '\x2', '(', ')', '\a', 'T', '\x2', 
		'\x2', ')', '*', '\a', 'G', '\x2', '\x2', '*', '\f', '\x3', '\x2', '\x2', 
		'\x2', '+', '-', '\t', '\x2', '\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', 
		'\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x32', '\x4', '\x32', ';', '\x2', '\x31', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x10', '\x3', '\x2', '\x2', '\x2', '\x35', '\x37', 
		'\t', '\x3', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', '\x12', 
		'\x3', '\x2', '\x2', '\x2', ':', '@', '\x4', '>', '@', '\x2', ';', '<', 
		'\a', 'P', '\x2', '\x2', '<', '=', '\a', 'Q', '\x2', '\x2', '=', '@', 
		'\a', 'V', '\x2', '\x2', '>', '@', '\a', '#', '\x2', '\x2', '?', ':', 
		'\x3', '\x2', '\x2', '\x2', '?', ';', '\x3', '\x2', '\x2', '\x2', '?', 
		'>', '\x3', '\x2', '\x2', '\x2', '@', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'\a', '\x2', '.', '\x33', '\x38', '?', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
