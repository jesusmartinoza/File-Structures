//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\BDAGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class BDAGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, ATTRS=4, ID=5, SEP=6, OP=7;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "ATTRS", "ID", "SEP", "OP"
	};


	public BDAGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BDAGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'SELECT'", "'*'", "'FROM'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "ATTRS", "ID", "SEP", "OP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BDAGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BDAGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\t', ':', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '$', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', '%', '\x5', '\x5', '(', '\n', '\x5', '\x3', 
		'\x6', '\x6', '\x6', '+', '\n', '\x6', '\r', '\x6', '\xE', '\x6', ',', 
		'\x3', '\a', '\x6', '\a', '\x30', '\n', '\a', '\r', '\a', '\xE', '\a', 
		'\x31', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\x39', '\n', '\b', '\x2', '\x2', '\t', '\x3', '\x3', '\x5', 
		'\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', 
		'\x3', '\x2', '\x4', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x4', '\x2', 
		'\v', '\v', '\"', '\"', '\x2', '?', '\x2', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '\x18', '\x3', '\x2', '\x2', '\x2', '\a', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\'', '\x3', '\x2', '\x2', '\x2', '\v', '*', '\x3', 
		'\x2', '\x2', '\x2', '\r', '/', '\x3', '\x2', '\x2', '\x2', '\xF', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\a', 'U', '\x2', '\x2', '\x12', 
		'\x13', '\a', 'G', '\x2', '\x2', '\x13', '\x14', '\a', 'N', '\x2', '\x2', 
		'\x14', '\x15', '\a', 'G', '\x2', '\x2', '\x15', '\x16', '\a', '\x45', 
		'\x2', '\x2', '\x16', '\x17', '\a', 'V', '\x2', '\x2', '\x17', '\x4', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\a', ',', '\x2', '\x2', '\x19', 
		'\x6', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', 'H', '\x2', '\x2', 
		'\x1B', '\x1C', '\a', 'T', '\x2', '\x2', '\x1C', '\x1D', '\a', 'Q', '\x2', 
		'\x2', '\x1D', '\x1E', '\a', 'O', '\x2', '\x2', '\x1E', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '(', '\x5', '\v', '\x6', '\x2', ' ', '!', '\x5', 
		'\v', '\x6', '\x2', '!', '\"', '\a', '.', '\x2', '\x2', '\"', '$', '\x3', 
		'\x2', '\x2', '\x2', '#', ' ', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', 
		'\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', 
		'\x2', '\x2', '\x2', '&', '(', '\x3', '\x2', '\x2', '\x2', '\'', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\'', '#', '\x3', '\x2', '\x2', '\x2', '(', 
		'\n', '\x3', '\x2', '\x2', '\x2', ')', '+', '\t', '\x2', '\x2', '\x2', 
		'*', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', 
		',', '*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', 
		'-', '\f', '\x3', '\x2', '\x2', '\x2', '.', '\x30', '\t', '\x3', '\x2', 
		'\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x39', '\x4', '>', '@', '\x2', '\x34', '\x35', '\a', 'P', '\x2', 
		'\x2', '\x35', '\x36', '\a', 'Q', '\x2', '\x2', '\x36', '\x39', '\a', 
		'V', '\x2', '\x2', '\x37', '\x39', '\a', '#', '\x2', '\x2', '\x38', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x2', '%', '\'', ',', '\x31', '\x38', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
