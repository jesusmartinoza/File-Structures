//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\BDAGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class BDAGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, ID=6, NUM=7, SEP=8, OP=9;
	public const int
		RULE_query = 0, RULE_filter = 1;
	public static readonly string[] ruleNames = {
		"query", "filter"
	};

	private static readonly string[] _LiteralNames = {
		null, "'SELECT'", "','", "'*'", "'FROM'", "'WHERE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "ID", "NUM", "SEP", "OP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BDAGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BDAGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BDAGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BDAGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class QueryContext : ParserRuleContext {
		public ITerminalNode[] SEP() { return GetTokens(BDAGrammarParser.SEP); }
		public ITerminalNode SEP(int i) {
			return GetToken(BDAGrammarParser.SEP, i);
		}
		public ITerminalNode[] ID() { return GetTokens(BDAGrammarParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(BDAGrammarParser.ID, i);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBDAGrammarListener typedListener = listener as IBDAGrammarListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBDAGrammarListener typedListener = listener as IBDAGrammarListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4; Match(T__0);
			State = 5; Match(SEP);
			State = 16;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 13;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 6; Match(ID);
					}
					break;
				case 2:
					{
					State = 9;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 7; Match(ID);
						State = 8; Match(T__1);
						}
						}
						State = 11;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==ID );
					}
					break;
				}
				}
				break;
			case T__2:
				{
				State = 15; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 18; Match(SEP);
			State = 19; Match(T__3);
			State = 20; Match(SEP);
			State = 21; Match(ID);
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEP) {
				{
				State = 22; filter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ITerminalNode[] SEP() { return GetTokens(BDAGrammarParser.SEP); }
		public ITerminalNode SEP(int i) {
			return GetToken(BDAGrammarParser.SEP, i);
		}
		public ITerminalNode OP() { return GetToken(BDAGrammarParser.OP, 0); }
		public ITerminalNode NUM() { return GetToken(BDAGrammarParser.NUM, 0); }
		public ITerminalNode ID() { return GetToken(BDAGrammarParser.ID, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBDAGrammarListener typedListener = listener as IBDAGrammarListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBDAGrammarListener typedListener = listener as IBDAGrammarListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 2, RULE_filter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; Match(SEP);
			State = 26; Match(T__4);
			State = 27; Match(SEP);
			State = 28; Match(OP);
			State = 29;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==NUM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '\"', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x6', '\x2', '\f', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\r', 
		'\x5', '\x2', '\x10', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x13', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x1A', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x2', '\x2', '\x4', '\x2', '\x4', '\x2', '\x3', '\x3', '\x2', '\b', '\t', 
		'\x2', '#', '\x2', '\x6', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\a', '\a', '\x3', '\x2', '\x2', '\a', '\x12', 
		'\a', '\n', '\x2', '\x2', '\b', '\x10', '\a', '\b', '\x2', '\x2', '\t', 
		'\n', '\a', '\b', '\x2', '\x2', '\n', '\f', '\a', '\x4', '\x2', '\x2', 
		'\v', '\t', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\v', '\x3', '\x2', '\x2', '\x2', '\r', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x10', '\x3', '\x2', '\x2', '\x2', '\xF', '\b', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '\v', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x11', '\x13', '\a', '\x5', '\x2', 
		'\x2', '\x12', '\xF', '\x3', '\x2', '\x2', '\x2', '\x12', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x15', '\a', '\n', '\x2', '\x2', '\x15', '\x16', '\a', '\x6', '\x2', 
		'\x2', '\x16', '\x17', '\a', '\n', '\x2', '\x2', '\x17', '\x19', '\a', 
		'\b', '\x2', '\x2', '\x18', '\x1A', '\x5', '\x4', '\x3', '\x2', '\x19', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', 
		'\n', '\x2', '\x2', '\x1C', '\x1D', '\a', '\a', '\x2', '\x2', '\x1D', 
		'\x1E', '\a', '\n', '\x2', '\x2', '\x1E', '\x1F', '\a', '\v', '\x2', '\x2', 
		'\x1F', ' ', '\t', '\x2', '\x2', '\x2', ' ', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\r', '\xF', '\x12', '\x19',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
